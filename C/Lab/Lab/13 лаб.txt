#include <math.h>
#include <ctime>
#include <stdlib.h>
#include <conio.h>
#include <iostream>
#include "graphics.h"
#include "winbgim.h"
#include <string>
#ifndef STRUCTURE_H
#define STRUCTURE_H
#define structSize 15
using namespace std;


HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
struct tLE16
{
    tLE16* next;
    union {
        short int data;
        unsigned char Digit[sizeof(data)];
    };
};
struct tLE32
{
    tLE32* next;
    union {
        int data;
        unsigned char Digit[sizeof(data)];
    };
};
struct Queue16
{
    tLE16* head;
    tLE16* tail;
};
struct Queue32
{
    tLE32* head;
    tLE32* tail;
};
#endif

int CheckSum(tLE16* head)
{
    tLE16* p;
    int sum = 0;
    for (p = head; p; p = p->next)
    {
        sum += p->data;
    }
    return sum;
}

int RunNumber(tLE16* head)
{
    int sequence = 1;
    tLE16* p;
    for (p = head; p->next; p = p->next)
    {
        if (p->data > p->next->data)
            sequence++;
    }
    return sequence;
}

int CheckSum(tLE32* head)
{
    tLE32* p;
    int sum = 0;
    for (p = head; p; p = p->next)
    {
        sum += p->data;
    }
    return sum;
}

int RunNumber(tLE32* head)
{
    int sequence = 1;
    tLE32* p;
    for (p = head; p->next; p = p->next)
    {
        if (p->data > p->next->data)
            sequence++;
    }
    return sequence;
}

void QueueFillInc(int n, tLE16* (&head), tLE16* (&tail))
{
    int i = 1;
    tLE16* p;
    head = tail = new tLE16;
    head->next = tail->next = 0;
    tail->data = i;
    i++;
    do
    {
        p = new tLE16;
        p->data = i;
        tail->next = p;
        tail = p;
        i++;

    } while (i <= n);
    tail->next = 0;
}

void QueueFillDec(int n, tLE16* (&head), tLE16* (&tail))
{
    int i = n;
    tLE16* p;
    head = tail = new tLE16;
    head->next = tail->next = 0;
    tail->data = i;
    i--;
    do
    {
        p = new tLE16;
        p->data = i;
        tail->next = p;
        tail = p;
        i--;

    } while (i > 0);
    tail->next = 0;
}

void QueueFillRand(int n, tLE16* (&head), tLE16* (&tail))
{
    srand(time(NULL));
    int i = 1;
    tLE16* p;
    head = tail = new tLE16;
    head->next = tail->next = 0;
    tail->data = rand() % (n * 2);
    i++;
    do
    {
        p = new tLE16;
        p->data = rand() % (n * 2);
        tail->next = p;
        tail = p;
        i++;

    } while (i <= n);
    tail->next = 0;
}

void QueueFillInc(int n, tLE32* (&head), tLE32* (&tail))
{
    int i = 1;
    tLE32* p;
    head = tail = new tLE32;
    head->next = tail->next = 0;
    tail->data = i;
    i++;
    do
    {
        p = new tLE32;
        p->data = i;
        tail->next = p;
        tail = p;
        i++;

    } while (i <= n);
    tail->next = 0;
}

void QueueFillDec(int n, tLE32* (&head), tLE32* (&tail))
{
    int i = n;
    tLE32* p;
    head = tail = new tLE32;
    head->next = tail->next = 0;
    tail->data = i;
    i--;
    do
    {
        p = new tLE32;
        p->data = i;
        tail->next = p;
        tail = p;
        i--;

    } while (i > 0);
    tail->next = 0;
}

void QueueFillRand(int n, tLE32* (&head), tLE32* (&tail))
{
    srand(time(NULL));
    int i = 1;
    tLE32* p;
    head = tail = new tLE32;
    head->next = tail->next = 0;
    tail->data = rand() % ((n * 2) * 10000);
    i++;
    do
    {
        p = new tLE32;
        p->data = rand() % ((n * 2) * 10000);
        tail->next = p;
        tail = p;
        i++;

    } while (i <= n);
    tail->next = 0;
}

void PrintList(tLE16* head, tLE16* tail)
{
    tLE16* p;
    int q = 0;

    SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 4));
    cout << "[" << head << "]" << endl;
    for (p = head; p; p = p->next)
    {
        if (q == 5)
        {
            cout << endl;
            q = 0;
        }
        SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 3));
        cout << "[" << p << "]";
        cout.width(10);
        cout.setf(ios::left);
        SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 7));
        cout << p->data;
        q++;
    }
    if (tail != NULL)
    {
        SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 4));
        cout << endl
            << "[" << tail << "]" << endl;
        SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 7));
    }
    cout << endl
        << " Check sum: " << CheckSum(head);
    cout << endl
        << " RunNumber: " << RunNumber(head);
    cout << endl;
} //Âûâîä â òåðìèíàë

void PrintList(tLE32* head, tLE32* tail)
{
    tLE32* p;
    int q = 0;

    SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 4));
    cout << "[" << head << "]" << endl;
    for (p = head; p; p = p->next)
    {
        if (q == 5)
        {
            cout << endl;
            q = 0;
        }
        SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 3));
        cout << "[" << p << "]";
        cout.width(10);
        cout.setf(ios::left);
        SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 7));
        cout << p->data;
        q++;
    }
    if (tail != NULL)
    {
        SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 4));
        cout << endl
            << "[" << tail << "]" << endl;
        SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 7));
    }
    cout << endl
        << " Check sum: " << CheckSum(head);
    cout << "\n" << " RunNumber: " << RunNumber(head);
    cout << endl;
} //Âûâîä â òåðìèíàë

void DeleteList(tLE16* (&head), tLE16* (&tail))
{

    tLE16* p, * t;
    for (p = head; p; p = t)
    {
        t = p->next;
        delete p;
        /*         SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 4));
        cout << endl
             << "DELETE [" << p << "]" << endl;
        SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 7)); */
    }
    head = tail = NULL;
}

void DeleteList(tLE32* (&head), tLE32* (&tail))
{
    tLE32* p, * t;
    for (p = head; p; p = t)
    {
        t = p->next;
        delete p;
        /*         SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 4));
        cout << endl
             << "DELETE [" << p << "]" << endl;
        SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 7)); */
    }
    head = tail = NULL;
}

void DigitalSort(tLE16* (&S), tLE16* (&tail), int& M, int dec = 0) {
    M = 0;
    int KDI[2] = { 1, 0 };
    int L = 2;
    tLE16* temp;
    Queue16 q[256];
    tLE16* p;
    unsigned char d;
    int k;

    for (int j = L - 1; j >= 0; j--) {
        for (int i = 0; i < 255; i++) {
            q[i].tail = (tLE16*)&(q[i].head);
        }
        p = S;
        k = KDI[j];
        while (p != NULL) {
            M++;
            d = p->Digit[k];
            q[d].tail->next = p;
            q[d].tail = p;
            p = p->next;
        }
        temp = p = (tLE16*)&S;

        int i = 0;
        int sign = 1;
        if (dec == 1) {
            i = 255;
            sign = -1;
        }

        while ((i > -1) && (i < 256)) {
            if (q[i].tail != (tLE16*)&(q[i].head)) {
                M++;
                p->next = q[i].head;
                p = q[i].tail;
            }
            i += sign;
        }

        p->next = NULL;
        S = temp->next;
    }
    return;
}

void DigitalSort(tLE32* (&S), tLE32* (&tail), int& M, int dec = 0) {
    int KDI[4] = { 3, 2, 1, 0 };
    int L = 4;
    tLE32* temp;
    Queue32 q[256];
    tLE32* p;
    unsigned char d;
    int k;

    for (int j = L - 1; j >= 0; j--) {
        for (int i = 0; i <= 255; i++) {
            q[i].tail = (tLE32*)&(q[i].head);
        }
        p = S;
        k = KDI[j];
        while (p != NULL) {
            M++;
            d = p->Digit[k];
            q[d].tail->next = p;
            q[d].tail = p;
            p = p->next;
        }
        temp = p = (tLE32*)&S;

        int i = 0;
        int sign = 1;
        if (dec == 1) {
            i = 255;
            sign = -1;
        }

        while ((i > -1) && (i < 256)) {
            if (q[i].tail != (tLE32*)&(q[i].head)) {
                M++;
                p->next = q[i].head;
                p = q[i].tail;
            }
            i += sign;
        }

        p->next = NULL;
        S = temp->next;
    }
    return;
}

using namespace std;

int main()
{
    double M_theoretical, C_theoretical = 0;
    int M_real = 0, temp = 0;
    int n, t, f, u;
    tLE16* head16 = NULL, * tail16 = NULL;
    tLE32* head32 = NULL, * tail32 = NULL;
    setlocale(LC_ALL, "Russian");
    system("CLS");

    do
    {
        system("CLS");
        cout
            << "1. Хз что " << endl
            << endl;

        cout
            << " \nPress [Esc] to exit \n";
        t = _getch();
        system("CLS");
        switch (t)
        {

        case '1':
            M_real = 0, temp = 0;
            system("CLS");
            cout << "Введите n: ";
            cin >> n;

            cout << endl
                << "Чем заполнить:" << endl
                << "1.FillInc (по возрастанию)" << endl
                << "2.FillDec (по убыванию)" << endl
                << "3.FillRand (рандом)" << endl
                << "Адьёс: ";

            f = _getch();
            system("CLS");
            cout << endl
                << "Ля ля ля:" << endl
                << "* 2(хз) " << endl
                << "* 4(не пон)" << endl
                << "До связи: ";
            u = _getch();
            switch (u)
            {
            case '2':
                switch (f)
                {
                case '1':
                    QueueFillInc(n, head16, tail16);
                    break;
                case '2':
                    QueueFillDec(n, head16, tail16);
                    break;
                case '3':
                    QueueFillRand(n, head16, tail16);
                    break;
                }
                system("CLS");
                M_theoretical = 2 * (n + 256);
                cout << "***********************PrintList(head16, tail16);***********************" << endl;
                PrintList(head16, tail16);
                cout << "************DigitalSort(head16, tail16, temp, 0); ************" << endl;
                DigitalSort(head16, tail16, temp, 0);
                M_real = temp;
                PrintList(head16, tail16);
                cout << "**************DigitalSort(head16, tail16, temp, 1);**************" << endl;
                DigitalSort(head16, tail16, temp, 1);
                PrintList(head16, tail16);
                DeleteList(head16, tail16);
                break;
            case '4':
                switch (f)
                {
                case '1':
                    QueueFillInc(n, head32, tail32);
                    break;
                case '2':
                    QueueFillDec(n, head32, tail32);
                    break;
                case '3':
                    QueueFillRand(n, head32, tail32);
                    break;
                }
                system("CLS");
                M_theoretical = 4 * (n + 256);
                cout << "***********************PrintList(head32, tail32);***********************" << endl;
                PrintList(head32, tail32);
                cout << "***********DigitalSort(head32, tail32, temp, 0);************" << endl;
                DigitalSort(head32, tail32, temp, 0);
                M_real = temp;
                PrintList(head32, tail32);
                cout << "**************DigitalSort(head32, tail32, temp, 1);**************" << endl;
                DigitalSort(head32, tail32, temp, 1);
                PrintList(head32, tail32);
                DeleteList(head32, tail32);
                break;
            }
            cout << "\n"
                << "M_theoretical = " << M_theoretical << endl
                << "C_theoretical = " << C_theoretical << endl
                << "M_real = " << M_real << endl
                << "C_real = 0" << endl;
            cout << "**************************************************************" << endl;
            cout << "         Без комментариев ..." << endl;
            _getch();
            break;

        case 27:
            return 0;
        }
    } while (1);
    return 0;
}